// @generated by protobuf-ts 2.2.4
// @generated from protobuf file "substrait/parameterized_types.proto" (package "substrait", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Type_Nullability } from "./type";
import { Type_UUID } from "./type";
import { Type_TimestampTZ } from "./type";
import { Type_IntervalDay } from "./type";
import { Type_IntervalYear } from "./type";
import { Type_Time } from "./type";
import { Type_Date } from "./type";
import { Type_Timestamp } from "./type";
import { Type_Binary } from "./type";
import { Type_String } from "./type";
import { Type_FP64 } from "./type";
import { Type_FP32 } from "./type";
import { Type_I64 } from "./type";
import { Type_I32 } from "./type";
import { Type_I16 } from "./type";
import { Type_I8 } from "./type";
import { Type_Boolean } from "./type";
/**
 * @generated from protobuf message substrait.ParameterizedType
 */
export interface ParameterizedType {
    /**
     * @generated from protobuf oneof: kind
     */
    kind: {
        oneofKind: "bool";
        /**
         * @generated from protobuf field: substrait.Type.Boolean bool = 1;
         */
        bool: Type_Boolean;
    } | {
        oneofKind: "i8";
        /**
         * @generated from protobuf field: substrait.Type.I8 i8 = 2;
         */
        i8: Type_I8;
    } | {
        oneofKind: "i16";
        /**
         * @generated from protobuf field: substrait.Type.I16 i16 = 3;
         */
        i16: Type_I16;
    } | {
        oneofKind: "i32";
        /**
         * @generated from protobuf field: substrait.Type.I32 i32 = 5;
         */
        i32: Type_I32;
    } | {
        oneofKind: "i64";
        /**
         * @generated from protobuf field: substrait.Type.I64 i64 = 7;
         */
        i64: Type_I64;
    } | {
        oneofKind: "fp32";
        /**
         * @generated from protobuf field: substrait.Type.FP32 fp32 = 10;
         */
        fp32: Type_FP32;
    } | {
        oneofKind: "fp64";
        /**
         * @generated from protobuf field: substrait.Type.FP64 fp64 = 11;
         */
        fp64: Type_FP64;
    } | {
        oneofKind: "string";
        /**
         * @generated from protobuf field: substrait.Type.String string = 12;
         */
        string: Type_String;
    } | {
        oneofKind: "binary";
        /**
         * @generated from protobuf field: substrait.Type.Binary binary = 13;
         */
        binary: Type_Binary;
    } | {
        oneofKind: "timestamp";
        /**
         * @generated from protobuf field: substrait.Type.Timestamp timestamp = 14;
         */
        timestamp: Type_Timestamp;
    } | {
        oneofKind: "date";
        /**
         * @generated from protobuf field: substrait.Type.Date date = 16;
         */
        date: Type_Date;
    } | {
        oneofKind: "time";
        /**
         * @generated from protobuf field: substrait.Type.Time time = 17;
         */
        time: Type_Time;
    } | {
        oneofKind: "intervalYear";
        /**
         * @generated from protobuf field: substrait.Type.IntervalYear interval_year = 19;
         */
        intervalYear: Type_IntervalYear;
    } | {
        oneofKind: "intervalDay";
        /**
         * @generated from protobuf field: substrait.Type.IntervalDay interval_day = 20;
         */
        intervalDay: Type_IntervalDay;
    } | {
        oneofKind: "timestampTz";
        /**
         * @generated from protobuf field: substrait.Type.TimestampTZ timestamp_tz = 29;
         */
        timestampTz: Type_TimestampTZ;
    } | {
        oneofKind: "uuid";
        /**
         * @generated from protobuf field: substrait.Type.UUID uuid = 32;
         */
        uuid: Type_UUID;
    } | {
        oneofKind: "fixedChar";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.ParameterizedFixedChar fixed_char = 21;
         */
        fixedChar: ParameterizedType_ParameterizedFixedChar;
    } | {
        oneofKind: "varchar";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.ParameterizedVarChar varchar = 22;
         */
        varchar: ParameterizedType_ParameterizedVarChar;
    } | {
        oneofKind: "fixedBinary";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.ParameterizedFixedBinary fixed_binary = 23;
         */
        fixedBinary: ParameterizedType_ParameterizedFixedBinary;
    } | {
        oneofKind: "decimal";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.ParameterizedDecimal decimal = 24;
         */
        decimal: ParameterizedType_ParameterizedDecimal;
    } | {
        oneofKind: "struct";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.ParameterizedStruct struct = 25;
         */
        struct: ParameterizedType_ParameterizedStruct;
    } | {
        oneofKind: "list";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.ParameterizedList list = 27;
         */
        list: ParameterizedType_ParameterizedList;
    } | {
        oneofKind: "map";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.ParameterizedMap map = 28;
         */
        map: ParameterizedType_ParameterizedMap;
    } | {
        oneofKind: "userDefinedPointer";
        /**
         * @generated from protobuf field: uint32 user_defined_pointer = 31;
         */
        userDefinedPointer: number;
    } | {
        oneofKind: "typeParameter";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.TypeParameter type_parameter = 33;
         */
        typeParameter: ParameterizedType_TypeParameter;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message substrait.ParameterizedType.TypeParameter
 */
export interface ParameterizedType_TypeParameter {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated substrait.ParameterizedType bounds = 2;
     */
    bounds: ParameterizedType[];
}
/**
 * @generated from protobuf message substrait.ParameterizedType.IntegerParameter
 */
export interface ParameterizedType_IntegerParameter {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: substrait.ParameterizedType.NullableInteger range_start_inclusive = 2;
     */
    rangeStartInclusive?: ParameterizedType_NullableInteger;
    /**
     * @generated from protobuf field: substrait.ParameterizedType.NullableInteger range_end_exclusive = 3;
     */
    rangeEndExclusive?: ParameterizedType_NullableInteger;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.NullableInteger
 */
export interface ParameterizedType_NullableInteger {
    /**
     * @generated from protobuf field: int64 value = 1;
     */
    value: bigint;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.ParameterizedFixedChar
 */
export interface ParameterizedType_ParameterizedFixedChar {
    /**
     * @generated from protobuf field: substrait.ParameterizedType.IntegerOption length = 1;
     */
    length?: ParameterizedType_IntegerOption;
    /**
     * @generated from protobuf field: uint32 variation_pointer = 2;
     */
    variationPointer: number;
    /**
     * @generated from protobuf field: substrait.Type.Nullability nullability = 3;
     */
    nullability: Type_Nullability;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.ParameterizedVarChar
 */
export interface ParameterizedType_ParameterizedVarChar {
    /**
     * @generated from protobuf field: substrait.ParameterizedType.IntegerOption length = 1;
     */
    length?: ParameterizedType_IntegerOption;
    /**
     * @generated from protobuf field: uint32 variation_pointer = 2;
     */
    variationPointer: number;
    /**
     * @generated from protobuf field: substrait.Type.Nullability nullability = 3;
     */
    nullability: Type_Nullability;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.ParameterizedFixedBinary
 */
export interface ParameterizedType_ParameterizedFixedBinary {
    /**
     * @generated from protobuf field: substrait.ParameterizedType.IntegerOption length = 1;
     */
    length?: ParameterizedType_IntegerOption;
    /**
     * @generated from protobuf field: uint32 variation_pointer = 2;
     */
    variationPointer: number;
    /**
     * @generated from protobuf field: substrait.Type.Nullability nullability = 3;
     */
    nullability: Type_Nullability;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.ParameterizedDecimal
 */
export interface ParameterizedType_ParameterizedDecimal {
    /**
     * @generated from protobuf field: substrait.ParameterizedType.IntegerOption scale = 1;
     */
    scale?: ParameterizedType_IntegerOption;
    /**
     * @generated from protobuf field: substrait.ParameterizedType.IntegerOption precision = 2;
     */
    precision?: ParameterizedType_IntegerOption;
    /**
     * @generated from protobuf field: uint32 variation_pointer = 3;
     */
    variationPointer: number;
    /**
     * @generated from protobuf field: substrait.Type.Nullability nullability = 4;
     */
    nullability: Type_Nullability;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.ParameterizedStruct
 */
export interface ParameterizedType_ParameterizedStruct {
    /**
     * @generated from protobuf field: repeated substrait.ParameterizedType types = 1;
     */
    types: ParameterizedType[];
    /**
     * @generated from protobuf field: uint32 variation_pointer = 2;
     */
    variationPointer: number;
    /**
     * @generated from protobuf field: substrait.Type.Nullability nullability = 3;
     */
    nullability: Type_Nullability;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.ParameterizedNamedStruct
 */
export interface ParameterizedType_ParameterizedNamedStruct {
    /**
     * list of names in dfs order
     *
     * @generated from protobuf field: repeated string names = 1;
     */
    names: string[];
    /**
     * @generated from protobuf field: substrait.ParameterizedType.ParameterizedStruct struct = 2;
     */
    struct?: ParameterizedType_ParameterizedStruct;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.ParameterizedList
 */
export interface ParameterizedType_ParameterizedList {
    /**
     * @generated from protobuf field: substrait.ParameterizedType type = 1;
     */
    type?: ParameterizedType;
    /**
     * @generated from protobuf field: uint32 variation_pointer = 2;
     */
    variationPointer: number;
    /**
     * @generated from protobuf field: substrait.Type.Nullability nullability = 3;
     */
    nullability: Type_Nullability;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.ParameterizedMap
 */
export interface ParameterizedType_ParameterizedMap {
    /**
     * @generated from protobuf field: substrait.ParameterizedType key = 1;
     */
    key?: ParameterizedType;
    /**
     * @generated from protobuf field: substrait.ParameterizedType value = 2;
     */
    value?: ParameterizedType;
    /**
     * @generated from protobuf field: uint32 variation_pointer = 3;
     */
    variationPointer: number;
    /**
     * @generated from protobuf field: substrait.Type.Nullability nullability = 4;
     */
    nullability: Type_Nullability;
}
/**
 * @generated from protobuf message substrait.ParameterizedType.IntegerOption
 */
export interface ParameterizedType_IntegerOption {
    /**
     * @generated from protobuf oneof: integer_type
     */
    integerType: {
        oneofKind: "literal";
        /**
         * @generated from protobuf field: int32 literal = 1;
         */
        literal: number;
    } | {
        oneofKind: "parameter";
        /**
         * @generated from protobuf field: substrait.ParameterizedType.IntegerParameter parameter = 2;
         */
        parameter: ParameterizedType_IntegerParameter;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType$Type extends MessageType<ParameterizedType> {
    constructor() {
        super("substrait.ParameterizedType", [
            { no: 1, name: "bool", kind: "message", oneof: "kind", T: () => Type_Boolean },
            { no: 2, name: "i8", kind: "message", oneof: "kind", T: () => Type_I8 },
            { no: 3, name: "i16", kind: "message", oneof: "kind", T: () => Type_I16 },
            { no: 5, name: "i32", kind: "message", oneof: "kind", T: () => Type_I32 },
            { no: 7, name: "i64", kind: "message", oneof: "kind", T: () => Type_I64 },
            { no: 10, name: "fp32", kind: "message", oneof: "kind", T: () => Type_FP32 },
            { no: 11, name: "fp64", kind: "message", oneof: "kind", T: () => Type_FP64 },
            { no: 12, name: "string", kind: "message", oneof: "kind", T: () => Type_String },
            { no: 13, name: "binary", kind: "message", oneof: "kind", T: () => Type_Binary },
            { no: 14, name: "timestamp", kind: "message", oneof: "kind", T: () => Type_Timestamp },
            { no: 16, name: "date", kind: "message", oneof: "kind", T: () => Type_Date },
            { no: 17, name: "time", kind: "message", oneof: "kind", T: () => Type_Time },
            { no: 19, name: "interval_year", kind: "message", oneof: "kind", T: () => Type_IntervalYear },
            { no: 20, name: "interval_day", kind: "message", oneof: "kind", T: () => Type_IntervalDay },
            { no: 29, name: "timestamp_tz", kind: "message", oneof: "kind", T: () => Type_TimestampTZ },
            { no: 32, name: "uuid", kind: "message", oneof: "kind", T: () => Type_UUID },
            { no: 21, name: "fixed_char", kind: "message", oneof: "kind", T: () => ParameterizedType_ParameterizedFixedChar },
            { no: 22, name: "varchar", kind: "message", oneof: "kind", T: () => ParameterizedType_ParameterizedVarChar },
            { no: 23, name: "fixed_binary", kind: "message", oneof: "kind", T: () => ParameterizedType_ParameterizedFixedBinary },
            { no: 24, name: "decimal", kind: "message", oneof: "kind", T: () => ParameterizedType_ParameterizedDecimal },
            { no: 25, name: "struct", kind: "message", oneof: "kind", T: () => ParameterizedType_ParameterizedStruct },
            { no: 27, name: "list", kind: "message", oneof: "kind", T: () => ParameterizedType_ParameterizedList },
            { no: 28, name: "map", kind: "message", oneof: "kind", T: () => ParameterizedType_ParameterizedMap },
            { no: 31, name: "user_defined_pointer", kind: "scalar", oneof: "kind", T: 13 /*ScalarType.UINT32*/ },
            { no: 33, name: "type_parameter", kind: "message", oneof: "kind", T: () => ParameterizedType_TypeParameter }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType>): ParameterizedType {
        const message = { kind: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType): ParameterizedType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* substrait.Type.Boolean bool */ 1:
                    message.kind = {
                        oneofKind: "bool",
                        bool: Type_Boolean.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).bool)
                    };
                    break;
                case /* substrait.Type.I8 i8 */ 2:
                    message.kind = {
                        oneofKind: "i8",
                        i8: Type_I8.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).i8)
                    };
                    break;
                case /* substrait.Type.I16 i16 */ 3:
                    message.kind = {
                        oneofKind: "i16",
                        i16: Type_I16.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).i16)
                    };
                    break;
                case /* substrait.Type.I32 i32 */ 5:
                    message.kind = {
                        oneofKind: "i32",
                        i32: Type_I32.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).i32)
                    };
                    break;
                case /* substrait.Type.I64 i64 */ 7:
                    message.kind = {
                        oneofKind: "i64",
                        i64: Type_I64.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).i64)
                    };
                    break;
                case /* substrait.Type.FP32 fp32 */ 10:
                    message.kind = {
                        oneofKind: "fp32",
                        fp32: Type_FP32.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).fp32)
                    };
                    break;
                case /* substrait.Type.FP64 fp64 */ 11:
                    message.kind = {
                        oneofKind: "fp64",
                        fp64: Type_FP64.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).fp64)
                    };
                    break;
                case /* substrait.Type.String string */ 12:
                    message.kind = {
                        oneofKind: "string",
                        string: Type_String.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).string)
                    };
                    break;
                case /* substrait.Type.Binary binary */ 13:
                    message.kind = {
                        oneofKind: "binary",
                        binary: Type_Binary.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).binary)
                    };
                    break;
                case /* substrait.Type.Timestamp timestamp */ 14:
                    message.kind = {
                        oneofKind: "timestamp",
                        timestamp: Type_Timestamp.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).timestamp)
                    };
                    break;
                case /* substrait.Type.Date date */ 16:
                    message.kind = {
                        oneofKind: "date",
                        date: Type_Date.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).date)
                    };
                    break;
                case /* substrait.Type.Time time */ 17:
                    message.kind = {
                        oneofKind: "time",
                        time: Type_Time.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).time)
                    };
                    break;
                case /* substrait.Type.IntervalYear interval_year */ 19:
                    message.kind = {
                        oneofKind: "intervalYear",
                        intervalYear: Type_IntervalYear.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).intervalYear)
                    };
                    break;
                case /* substrait.Type.IntervalDay interval_day */ 20:
                    message.kind = {
                        oneofKind: "intervalDay",
                        intervalDay: Type_IntervalDay.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).intervalDay)
                    };
                    break;
                case /* substrait.Type.TimestampTZ timestamp_tz */ 29:
                    message.kind = {
                        oneofKind: "timestampTz",
                        timestampTz: Type_TimestampTZ.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).timestampTz)
                    };
                    break;
                case /* substrait.Type.UUID uuid */ 32:
                    message.kind = {
                        oneofKind: "uuid",
                        uuid: Type_UUID.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).uuid)
                    };
                    break;
                case /* substrait.ParameterizedType.ParameterizedFixedChar fixed_char */ 21:
                    message.kind = {
                        oneofKind: "fixedChar",
                        fixedChar: ParameterizedType_ParameterizedFixedChar.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).fixedChar)
                    };
                    break;
                case /* substrait.ParameterizedType.ParameterizedVarChar varchar */ 22:
                    message.kind = {
                        oneofKind: "varchar",
                        varchar: ParameterizedType_ParameterizedVarChar.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).varchar)
                    };
                    break;
                case /* substrait.ParameterizedType.ParameterizedFixedBinary fixed_binary */ 23:
                    message.kind = {
                        oneofKind: "fixedBinary",
                        fixedBinary: ParameterizedType_ParameterizedFixedBinary.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).fixedBinary)
                    };
                    break;
                case /* substrait.ParameterizedType.ParameterizedDecimal decimal */ 24:
                    message.kind = {
                        oneofKind: "decimal",
                        decimal: ParameterizedType_ParameterizedDecimal.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).decimal)
                    };
                    break;
                case /* substrait.ParameterizedType.ParameterizedStruct struct */ 25:
                    message.kind = {
                        oneofKind: "struct",
                        struct: ParameterizedType_ParameterizedStruct.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).struct)
                    };
                    break;
                case /* substrait.ParameterizedType.ParameterizedList list */ 27:
                    message.kind = {
                        oneofKind: "list",
                        list: ParameterizedType_ParameterizedList.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).list)
                    };
                    break;
                case /* substrait.ParameterizedType.ParameterizedMap map */ 28:
                    message.kind = {
                        oneofKind: "map",
                        map: ParameterizedType_ParameterizedMap.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).map)
                    };
                    break;
                case /* uint32 user_defined_pointer */ 31:
                    message.kind = {
                        oneofKind: "userDefinedPointer",
                        userDefinedPointer: reader.uint32()
                    };
                    break;
                case /* substrait.ParameterizedType.TypeParameter type_parameter */ 33:
                    message.kind = {
                        oneofKind: "typeParameter",
                        typeParameter: ParameterizedType_TypeParameter.internalBinaryRead(reader, reader.uint32(), options, (message.kind as any).typeParameter)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* substrait.Type.Boolean bool = 1; */
        if (message.kind.oneofKind === "bool")
            Type_Boolean.internalBinaryWrite(message.kind.bool, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.I8 i8 = 2; */
        if (message.kind.oneofKind === "i8")
            Type_I8.internalBinaryWrite(message.kind.i8, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.I16 i16 = 3; */
        if (message.kind.oneofKind === "i16")
            Type_I16.internalBinaryWrite(message.kind.i16, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.I32 i32 = 5; */
        if (message.kind.oneofKind === "i32")
            Type_I32.internalBinaryWrite(message.kind.i32, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.I64 i64 = 7; */
        if (message.kind.oneofKind === "i64")
            Type_I64.internalBinaryWrite(message.kind.i64, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.FP32 fp32 = 10; */
        if (message.kind.oneofKind === "fp32")
            Type_FP32.internalBinaryWrite(message.kind.fp32, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.FP64 fp64 = 11; */
        if (message.kind.oneofKind === "fp64")
            Type_FP64.internalBinaryWrite(message.kind.fp64, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.String string = 12; */
        if (message.kind.oneofKind === "string")
            Type_String.internalBinaryWrite(message.kind.string, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.Binary binary = 13; */
        if (message.kind.oneofKind === "binary")
            Type_Binary.internalBinaryWrite(message.kind.binary, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.Timestamp timestamp = 14; */
        if (message.kind.oneofKind === "timestamp")
            Type_Timestamp.internalBinaryWrite(message.kind.timestamp, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.Date date = 16; */
        if (message.kind.oneofKind === "date")
            Type_Date.internalBinaryWrite(message.kind.date, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.Time time = 17; */
        if (message.kind.oneofKind === "time")
            Type_Time.internalBinaryWrite(message.kind.time, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.IntervalYear interval_year = 19; */
        if (message.kind.oneofKind === "intervalYear")
            Type_IntervalYear.internalBinaryWrite(message.kind.intervalYear, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.IntervalDay interval_day = 20; */
        if (message.kind.oneofKind === "intervalDay")
            Type_IntervalDay.internalBinaryWrite(message.kind.intervalDay, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.TimestampTZ timestamp_tz = 29; */
        if (message.kind.oneofKind === "timestampTz")
            Type_TimestampTZ.internalBinaryWrite(message.kind.timestampTz, writer.tag(29, WireType.LengthDelimited).fork(), options).join();
        /* substrait.Type.UUID uuid = 32; */
        if (message.kind.oneofKind === "uuid")
            Type_UUID.internalBinaryWrite(message.kind.uuid, writer.tag(32, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.ParameterizedFixedChar fixed_char = 21; */
        if (message.kind.oneofKind === "fixedChar")
            ParameterizedType_ParameterizedFixedChar.internalBinaryWrite(message.kind.fixedChar, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.ParameterizedVarChar varchar = 22; */
        if (message.kind.oneofKind === "varchar")
            ParameterizedType_ParameterizedVarChar.internalBinaryWrite(message.kind.varchar, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.ParameterizedFixedBinary fixed_binary = 23; */
        if (message.kind.oneofKind === "fixedBinary")
            ParameterizedType_ParameterizedFixedBinary.internalBinaryWrite(message.kind.fixedBinary, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.ParameterizedDecimal decimal = 24; */
        if (message.kind.oneofKind === "decimal")
            ParameterizedType_ParameterizedDecimal.internalBinaryWrite(message.kind.decimal, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.ParameterizedStruct struct = 25; */
        if (message.kind.oneofKind === "struct")
            ParameterizedType_ParameterizedStruct.internalBinaryWrite(message.kind.struct, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.ParameterizedList list = 27; */
        if (message.kind.oneofKind === "list")
            ParameterizedType_ParameterizedList.internalBinaryWrite(message.kind.list, writer.tag(27, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.ParameterizedMap map = 28; */
        if (message.kind.oneofKind === "map")
            ParameterizedType_ParameterizedMap.internalBinaryWrite(message.kind.map, writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        /* uint32 user_defined_pointer = 31; */
        if (message.kind.oneofKind === "userDefinedPointer")
            writer.tag(31, WireType.Varint).uint32(message.kind.userDefinedPointer);
        /* substrait.ParameterizedType.TypeParameter type_parameter = 33; */
        if (message.kind.oneofKind === "typeParameter")
            ParameterizedType_TypeParameter.internalBinaryWrite(message.kind.typeParameter, writer.tag(33, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType
 */
export const ParameterizedType = new ParameterizedType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_TypeParameter$Type extends MessageType<ParameterizedType_TypeParameter> {
    constructor() {
        super("substrait.ParameterizedType.TypeParameter", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bounds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ParameterizedType }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_TypeParameter>): ParameterizedType_TypeParameter {
        const message = { name: "", bounds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_TypeParameter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_TypeParameter): ParameterizedType_TypeParameter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated substrait.ParameterizedType bounds */ 2:
                    message.bounds.push(ParameterizedType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_TypeParameter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated substrait.ParameterizedType bounds = 2; */
        for (let i = 0; i < message.bounds.length; i++)
            ParameterizedType.internalBinaryWrite(message.bounds[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.TypeParameter
 */
export const ParameterizedType_TypeParameter = new ParameterizedType_TypeParameter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_IntegerParameter$Type extends MessageType<ParameterizedType_IntegerParameter> {
    constructor() {
        super("substrait.ParameterizedType.IntegerParameter", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "range_start_inclusive", kind: "message", T: () => ParameterizedType_NullableInteger },
            { no: 3, name: "range_end_exclusive", kind: "message", T: () => ParameterizedType_NullableInteger }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_IntegerParameter>): ParameterizedType_IntegerParameter {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_IntegerParameter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_IntegerParameter): ParameterizedType_IntegerParameter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* substrait.ParameterizedType.NullableInteger range_start_inclusive */ 2:
                    message.rangeStartInclusive = ParameterizedType_NullableInteger.internalBinaryRead(reader, reader.uint32(), options, message.rangeStartInclusive);
                    break;
                case /* substrait.ParameterizedType.NullableInteger range_end_exclusive */ 3:
                    message.rangeEndExclusive = ParameterizedType_NullableInteger.internalBinaryRead(reader, reader.uint32(), options, message.rangeEndExclusive);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_IntegerParameter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* substrait.ParameterizedType.NullableInteger range_start_inclusive = 2; */
        if (message.rangeStartInclusive)
            ParameterizedType_NullableInteger.internalBinaryWrite(message.rangeStartInclusive, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.NullableInteger range_end_exclusive = 3; */
        if (message.rangeEndExclusive)
            ParameterizedType_NullableInteger.internalBinaryWrite(message.rangeEndExclusive, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.IntegerParameter
 */
export const ParameterizedType_IntegerParameter = new ParameterizedType_IntegerParameter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_NullableInteger$Type extends MessageType<ParameterizedType_NullableInteger> {
    constructor() {
        super("substrait.ParameterizedType.NullableInteger", [
            { no: 1, name: "value", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_NullableInteger>): ParameterizedType_NullableInteger {
        const message = { value: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_NullableInteger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_NullableInteger): ParameterizedType_NullableInteger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 value */ 1:
                    message.value = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_NullableInteger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 value = 1; */
        if (message.value !== 0n)
            writer.tag(1, WireType.Varint).int64(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.NullableInteger
 */
export const ParameterizedType_NullableInteger = new ParameterizedType_NullableInteger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_ParameterizedFixedChar$Type extends MessageType<ParameterizedType_ParameterizedFixedChar> {
    constructor() {
        super("substrait.ParameterizedType.ParameterizedFixedChar", [
            { no: 1, name: "length", kind: "message", T: () => ParameterizedType_IntegerOption },
            { no: 2, name: "variation_pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nullability", kind: "enum", T: () => ["substrait.Type.Nullability", Type_Nullability, "NULLABILITY_"] }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_ParameterizedFixedChar>): ParameterizedType_ParameterizedFixedChar {
        const message = { variationPointer: 0, nullability: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_ParameterizedFixedChar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_ParameterizedFixedChar): ParameterizedType_ParameterizedFixedChar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* substrait.ParameterizedType.IntegerOption length */ 1:
                    message.length = ParameterizedType_IntegerOption.internalBinaryRead(reader, reader.uint32(), options, message.length);
                    break;
                case /* uint32 variation_pointer */ 2:
                    message.variationPointer = reader.uint32();
                    break;
                case /* substrait.Type.Nullability nullability */ 3:
                    message.nullability = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_ParameterizedFixedChar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* substrait.ParameterizedType.IntegerOption length = 1; */
        if (message.length)
            ParameterizedType_IntegerOption.internalBinaryWrite(message.length, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 variation_pointer = 2; */
        if (message.variationPointer !== 0)
            writer.tag(2, WireType.Varint).uint32(message.variationPointer);
        /* substrait.Type.Nullability nullability = 3; */
        if (message.nullability !== 0)
            writer.tag(3, WireType.Varint).int32(message.nullability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.ParameterizedFixedChar
 */
export const ParameterizedType_ParameterizedFixedChar = new ParameterizedType_ParameterizedFixedChar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_ParameterizedVarChar$Type extends MessageType<ParameterizedType_ParameterizedVarChar> {
    constructor() {
        super("substrait.ParameterizedType.ParameterizedVarChar", [
            { no: 1, name: "length", kind: "message", T: () => ParameterizedType_IntegerOption },
            { no: 2, name: "variation_pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nullability", kind: "enum", T: () => ["substrait.Type.Nullability", Type_Nullability, "NULLABILITY_"] }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_ParameterizedVarChar>): ParameterizedType_ParameterizedVarChar {
        const message = { variationPointer: 0, nullability: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_ParameterizedVarChar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_ParameterizedVarChar): ParameterizedType_ParameterizedVarChar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* substrait.ParameterizedType.IntegerOption length */ 1:
                    message.length = ParameterizedType_IntegerOption.internalBinaryRead(reader, reader.uint32(), options, message.length);
                    break;
                case /* uint32 variation_pointer */ 2:
                    message.variationPointer = reader.uint32();
                    break;
                case /* substrait.Type.Nullability nullability */ 3:
                    message.nullability = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_ParameterizedVarChar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* substrait.ParameterizedType.IntegerOption length = 1; */
        if (message.length)
            ParameterizedType_IntegerOption.internalBinaryWrite(message.length, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 variation_pointer = 2; */
        if (message.variationPointer !== 0)
            writer.tag(2, WireType.Varint).uint32(message.variationPointer);
        /* substrait.Type.Nullability nullability = 3; */
        if (message.nullability !== 0)
            writer.tag(3, WireType.Varint).int32(message.nullability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.ParameterizedVarChar
 */
export const ParameterizedType_ParameterizedVarChar = new ParameterizedType_ParameterizedVarChar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_ParameterizedFixedBinary$Type extends MessageType<ParameterizedType_ParameterizedFixedBinary> {
    constructor() {
        super("substrait.ParameterizedType.ParameterizedFixedBinary", [
            { no: 1, name: "length", kind: "message", T: () => ParameterizedType_IntegerOption },
            { no: 2, name: "variation_pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nullability", kind: "enum", T: () => ["substrait.Type.Nullability", Type_Nullability, "NULLABILITY_"] }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_ParameterizedFixedBinary>): ParameterizedType_ParameterizedFixedBinary {
        const message = { variationPointer: 0, nullability: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_ParameterizedFixedBinary>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_ParameterizedFixedBinary): ParameterizedType_ParameterizedFixedBinary {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* substrait.ParameterizedType.IntegerOption length */ 1:
                    message.length = ParameterizedType_IntegerOption.internalBinaryRead(reader, reader.uint32(), options, message.length);
                    break;
                case /* uint32 variation_pointer */ 2:
                    message.variationPointer = reader.uint32();
                    break;
                case /* substrait.Type.Nullability nullability */ 3:
                    message.nullability = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_ParameterizedFixedBinary, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* substrait.ParameterizedType.IntegerOption length = 1; */
        if (message.length)
            ParameterizedType_IntegerOption.internalBinaryWrite(message.length, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 variation_pointer = 2; */
        if (message.variationPointer !== 0)
            writer.tag(2, WireType.Varint).uint32(message.variationPointer);
        /* substrait.Type.Nullability nullability = 3; */
        if (message.nullability !== 0)
            writer.tag(3, WireType.Varint).int32(message.nullability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.ParameterizedFixedBinary
 */
export const ParameterizedType_ParameterizedFixedBinary = new ParameterizedType_ParameterizedFixedBinary$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_ParameterizedDecimal$Type extends MessageType<ParameterizedType_ParameterizedDecimal> {
    constructor() {
        super("substrait.ParameterizedType.ParameterizedDecimal", [
            { no: 1, name: "scale", kind: "message", T: () => ParameterizedType_IntegerOption },
            { no: 2, name: "precision", kind: "message", T: () => ParameterizedType_IntegerOption },
            { no: 3, name: "variation_pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "nullability", kind: "enum", T: () => ["substrait.Type.Nullability", Type_Nullability, "NULLABILITY_"] }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_ParameterizedDecimal>): ParameterizedType_ParameterizedDecimal {
        const message = { variationPointer: 0, nullability: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_ParameterizedDecimal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_ParameterizedDecimal): ParameterizedType_ParameterizedDecimal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* substrait.ParameterizedType.IntegerOption scale */ 1:
                    message.scale = ParameterizedType_IntegerOption.internalBinaryRead(reader, reader.uint32(), options, message.scale);
                    break;
                case /* substrait.ParameterizedType.IntegerOption precision */ 2:
                    message.precision = ParameterizedType_IntegerOption.internalBinaryRead(reader, reader.uint32(), options, message.precision);
                    break;
                case /* uint32 variation_pointer */ 3:
                    message.variationPointer = reader.uint32();
                    break;
                case /* substrait.Type.Nullability nullability */ 4:
                    message.nullability = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_ParameterizedDecimal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* substrait.ParameterizedType.IntegerOption scale = 1; */
        if (message.scale)
            ParameterizedType_IntegerOption.internalBinaryWrite(message.scale, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType.IntegerOption precision = 2; */
        if (message.precision)
            ParameterizedType_IntegerOption.internalBinaryWrite(message.precision, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 variation_pointer = 3; */
        if (message.variationPointer !== 0)
            writer.tag(3, WireType.Varint).uint32(message.variationPointer);
        /* substrait.Type.Nullability nullability = 4; */
        if (message.nullability !== 0)
            writer.tag(4, WireType.Varint).int32(message.nullability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.ParameterizedDecimal
 */
export const ParameterizedType_ParameterizedDecimal = new ParameterizedType_ParameterizedDecimal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_ParameterizedStruct$Type extends MessageType<ParameterizedType_ParameterizedStruct> {
    constructor() {
        super("substrait.ParameterizedType.ParameterizedStruct", [
            { no: 1, name: "types", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ParameterizedType },
            { no: 2, name: "variation_pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nullability", kind: "enum", T: () => ["substrait.Type.Nullability", Type_Nullability, "NULLABILITY_"] }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_ParameterizedStruct>): ParameterizedType_ParameterizedStruct {
        const message = { types: [], variationPointer: 0, nullability: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_ParameterizedStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_ParameterizedStruct): ParameterizedType_ParameterizedStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated substrait.ParameterizedType types */ 1:
                    message.types.push(ParameterizedType.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 variation_pointer */ 2:
                    message.variationPointer = reader.uint32();
                    break;
                case /* substrait.Type.Nullability nullability */ 3:
                    message.nullability = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_ParameterizedStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated substrait.ParameterizedType types = 1; */
        for (let i = 0; i < message.types.length; i++)
            ParameterizedType.internalBinaryWrite(message.types[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 variation_pointer = 2; */
        if (message.variationPointer !== 0)
            writer.tag(2, WireType.Varint).uint32(message.variationPointer);
        /* substrait.Type.Nullability nullability = 3; */
        if (message.nullability !== 0)
            writer.tag(3, WireType.Varint).int32(message.nullability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.ParameterizedStruct
 */
export const ParameterizedType_ParameterizedStruct = new ParameterizedType_ParameterizedStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_ParameterizedNamedStruct$Type extends MessageType<ParameterizedType_ParameterizedNamedStruct> {
    constructor() {
        super("substrait.ParameterizedType.ParameterizedNamedStruct", [
            { no: 1, name: "names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "struct", kind: "message", T: () => ParameterizedType_ParameterizedStruct }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_ParameterizedNamedStruct>): ParameterizedType_ParameterizedNamedStruct {
        const message = { names: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_ParameterizedNamedStruct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_ParameterizedNamedStruct): ParameterizedType_ParameterizedNamedStruct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string names */ 1:
                    message.names.push(reader.string());
                    break;
                case /* substrait.ParameterizedType.ParameterizedStruct struct */ 2:
                    message.struct = ParameterizedType_ParameterizedStruct.internalBinaryRead(reader, reader.uint32(), options, message.struct);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_ParameterizedNamedStruct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string names = 1; */
        for (let i = 0; i < message.names.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.names[i]);
        /* substrait.ParameterizedType.ParameterizedStruct struct = 2; */
        if (message.struct)
            ParameterizedType_ParameterizedStruct.internalBinaryWrite(message.struct, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.ParameterizedNamedStruct
 */
export const ParameterizedType_ParameterizedNamedStruct = new ParameterizedType_ParameterizedNamedStruct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_ParameterizedList$Type extends MessageType<ParameterizedType_ParameterizedList> {
    constructor() {
        super("substrait.ParameterizedType.ParameterizedList", [
            { no: 1, name: "type", kind: "message", T: () => ParameterizedType },
            { no: 2, name: "variation_pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nullability", kind: "enum", T: () => ["substrait.Type.Nullability", Type_Nullability, "NULLABILITY_"] }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_ParameterizedList>): ParameterizedType_ParameterizedList {
        const message = { variationPointer: 0, nullability: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_ParameterizedList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_ParameterizedList): ParameterizedType_ParameterizedList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* substrait.ParameterizedType type */ 1:
                    message.type = ParameterizedType.internalBinaryRead(reader, reader.uint32(), options, message.type);
                    break;
                case /* uint32 variation_pointer */ 2:
                    message.variationPointer = reader.uint32();
                    break;
                case /* substrait.Type.Nullability nullability */ 3:
                    message.nullability = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_ParameterizedList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* substrait.ParameterizedType type = 1; */
        if (message.type)
            ParameterizedType.internalBinaryWrite(message.type, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 variation_pointer = 2; */
        if (message.variationPointer !== 0)
            writer.tag(2, WireType.Varint).uint32(message.variationPointer);
        /* substrait.Type.Nullability nullability = 3; */
        if (message.nullability !== 0)
            writer.tag(3, WireType.Varint).int32(message.nullability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.ParameterizedList
 */
export const ParameterizedType_ParameterizedList = new ParameterizedType_ParameterizedList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_ParameterizedMap$Type extends MessageType<ParameterizedType_ParameterizedMap> {
    constructor() {
        super("substrait.ParameterizedType.ParameterizedMap", [
            { no: 1, name: "key", kind: "message", T: () => ParameterizedType },
            { no: 2, name: "value", kind: "message", T: () => ParameterizedType },
            { no: 3, name: "variation_pointer", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "nullability", kind: "enum", T: () => ["substrait.Type.Nullability", Type_Nullability, "NULLABILITY_"] }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_ParameterizedMap>): ParameterizedType_ParameterizedMap {
        const message = { variationPointer: 0, nullability: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_ParameterizedMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_ParameterizedMap): ParameterizedType_ParameterizedMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* substrait.ParameterizedType key */ 1:
                    message.key = ParameterizedType.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                case /* substrait.ParameterizedType value */ 2:
                    message.value = ParameterizedType.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                case /* uint32 variation_pointer */ 3:
                    message.variationPointer = reader.uint32();
                    break;
                case /* substrait.Type.Nullability nullability */ 4:
                    message.nullability = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_ParameterizedMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* substrait.ParameterizedType key = 1; */
        if (message.key)
            ParameterizedType.internalBinaryWrite(message.key, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* substrait.ParameterizedType value = 2; */
        if (message.value)
            ParameterizedType.internalBinaryWrite(message.value, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 variation_pointer = 3; */
        if (message.variationPointer !== 0)
            writer.tag(3, WireType.Varint).uint32(message.variationPointer);
        /* substrait.Type.Nullability nullability = 4; */
        if (message.nullability !== 0)
            writer.tag(4, WireType.Varint).int32(message.nullability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.ParameterizedMap
 */
export const ParameterizedType_ParameterizedMap = new ParameterizedType_ParameterizedMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParameterizedType_IntegerOption$Type extends MessageType<ParameterizedType_IntegerOption> {
    constructor() {
        super("substrait.ParameterizedType.IntegerOption", [
            { no: 1, name: "literal", kind: "scalar", oneof: "integerType", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "parameter", kind: "message", oneof: "integerType", T: () => ParameterizedType_IntegerParameter }
        ]);
    }
    create(value?: PartialMessage<ParameterizedType_IntegerOption>): ParameterizedType_IntegerOption {
        const message = { integerType: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParameterizedType_IntegerOption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParameterizedType_IntegerOption): ParameterizedType_IntegerOption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 literal */ 1:
                    message.integerType = {
                        oneofKind: "literal",
                        literal: reader.int32()
                    };
                    break;
                case /* substrait.ParameterizedType.IntegerParameter parameter */ 2:
                    message.integerType = {
                        oneofKind: "parameter",
                        parameter: ParameterizedType_IntegerParameter.internalBinaryRead(reader, reader.uint32(), options, (message.integerType as any).parameter)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParameterizedType_IntegerOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 literal = 1; */
        if (message.integerType.oneofKind === "literal")
            writer.tag(1, WireType.Varint).int32(message.integerType.literal);
        /* substrait.ParameterizedType.IntegerParameter parameter = 2; */
        if (message.integerType.oneofKind === "parameter")
            ParameterizedType_IntegerParameter.internalBinaryWrite(message.integerType.parameter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.ParameterizedType.IntegerOption
 */
export const ParameterizedType_IntegerOption = new ParameterizedType_IntegerOption$Type();
