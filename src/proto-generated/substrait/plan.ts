// @generated by protobuf-ts 2.2.4
// @generated from protobuf file "substrait/plan.proto" (package "substrait", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AdvancedExtension } from "./extensions/extensions";
import { SimpleExtensionDeclaration } from "./extensions/extensions";
import { SimpleExtensionURI } from "./extensions/extensions";
import { RelRoot } from "./algebra";
import { Rel } from "./algebra";
/**
 * Either a relation or root relation
 *
 * @generated from protobuf message substrait.PlanRel
 */
export interface PlanRel {
    /**
     * @generated from protobuf oneof: rel_type
     */
    relType: {
        oneofKind: "rel";
        /**
         * Any relation
         *
         * @generated from protobuf field: substrait.Rel rel = 1;
         */
        rel: Rel;
    } | {
        oneofKind: "root";
        /**
         * The root of a relation tree
         *
         * @generated from protobuf field: substrait.RelRoot root = 2;
         */
        root: RelRoot;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Describe a set of operations to complete.
 * For compactness sake, identifiers are normalized at the plan level.
 *
 * @generated from protobuf message substrait.Plan
 */
export interface Plan {
    /**
     * a list of yaml specifications this plan may depend on
     *
     * @generated from protobuf field: repeated substrait.extensions.SimpleExtensionURI extension_uris = 1;
     */
    extensionUris: SimpleExtensionURI[];
    /**
     * a list of extensions this plan may depend on
     *
     * @generated from protobuf field: repeated substrait.extensions.SimpleExtensionDeclaration extensions = 2;
     */
    extensions: SimpleExtensionDeclaration[];
    /**
     * one or more relation trees that are associated with this plan.
     *
     * @generated from protobuf field: repeated substrait.PlanRel relations = 3;
     */
    relations: PlanRel[];
    /**
     * additional extensions associated with this plan.
     *
     * @generated from protobuf field: substrait.extensions.AdvancedExtension advanced_extensions = 4;
     */
    advancedExtensions?: AdvancedExtension;
    /**
     * A list of com.google.Any entities that this plan may use. Can be used to
     * warn if some embedded message types are unknown. Note that this list may
     * include message types that are ignorable (optimizations) or that are
     * unused. In many cases, a consumer may be able to work with a plan even if
     * one or more message types defined here are unknown.
     *
     * @generated from protobuf field: repeated string expected_type_urls = 5;
     */
    expectedTypeUrls: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PlanRel$Type extends MessageType<PlanRel> {
    constructor() {
        super("substrait.PlanRel", [
            { no: 1, name: "rel", kind: "message", oneof: "relType", T: () => Rel },
            { no: 2, name: "root", kind: "message", oneof: "relType", T: () => RelRoot }
        ]);
    }
    create(value?: PartialMessage<PlanRel>): PlanRel {
        const message = { relType: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlanRel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlanRel): PlanRel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* substrait.Rel rel */ 1:
                    message.relType = {
                        oneofKind: "rel",
                        rel: Rel.internalBinaryRead(reader, reader.uint32(), options, (message.relType as any).rel)
                    };
                    break;
                case /* substrait.RelRoot root */ 2:
                    message.relType = {
                        oneofKind: "root",
                        root: RelRoot.internalBinaryRead(reader, reader.uint32(), options, (message.relType as any).root)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlanRel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* substrait.Rel rel = 1; */
        if (message.relType.oneofKind === "rel")
            Rel.internalBinaryWrite(message.relType.rel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* substrait.RelRoot root = 2; */
        if (message.relType.oneofKind === "root")
            RelRoot.internalBinaryWrite(message.relType.root, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.PlanRel
 */
export const PlanRel = new PlanRel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Plan$Type extends MessageType<Plan> {
    constructor() {
        super("substrait.Plan", [
            { no: 1, name: "extension_uris", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SimpleExtensionURI },
            { no: 2, name: "extensions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SimpleExtensionDeclaration },
            { no: 3, name: "relations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlanRel },
            { no: 4, name: "advanced_extensions", kind: "message", T: () => AdvancedExtension },
            { no: 5, name: "expected_type_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Plan>): Plan {
        const message = { extensionUris: [], extensions: [], relations: [], expectedTypeUrls: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Plan>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Plan): Plan {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated substrait.extensions.SimpleExtensionURI extension_uris */ 1:
                    message.extensionUris.push(SimpleExtensionURI.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated substrait.extensions.SimpleExtensionDeclaration extensions */ 2:
                    message.extensions.push(SimpleExtensionDeclaration.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated substrait.PlanRel relations */ 3:
                    message.relations.push(PlanRel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* substrait.extensions.AdvancedExtension advanced_extensions */ 4:
                    message.advancedExtensions = AdvancedExtension.internalBinaryRead(reader, reader.uint32(), options, message.advancedExtensions);
                    break;
                case /* repeated string expected_type_urls */ 5:
                    message.expectedTypeUrls.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Plan, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated substrait.extensions.SimpleExtensionURI extension_uris = 1; */
        for (let i = 0; i < message.extensionUris.length; i++)
            SimpleExtensionURI.internalBinaryWrite(message.extensionUris[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated substrait.extensions.SimpleExtensionDeclaration extensions = 2; */
        for (let i = 0; i < message.extensions.length; i++)
            SimpleExtensionDeclaration.internalBinaryWrite(message.extensions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated substrait.PlanRel relations = 3; */
        for (let i = 0; i < message.relations.length; i++)
            PlanRel.internalBinaryWrite(message.relations[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* substrait.extensions.AdvancedExtension advanced_extensions = 4; */
        if (message.advancedExtensions)
            AdvancedExtension.internalBinaryWrite(message.advancedExtensions, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string expected_type_urls = 5; */
        for (let i = 0; i < message.expectedTypeUrls.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.expectedTypeUrls[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.Plan
 */
export const Plan = new Plan$Type();
