// @generated by protobuf-ts 2.2.4
// @generated from protobuf file "substrait/capabilities.proto" (package "substrait", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Defines a set of Capabilities that a system (producer or consumer) supports.
 *
 * @generated from protobuf message substrait.Capabilities
 */
export interface Capabilities {
    /**
     * List of Substrait versions this system supports
     *
     * @generated from protobuf field: repeated string substrait_versions = 1;
     */
    substraitVersions: string[];
    /**
     * list of com.google.Any message types this system supports for advanced
     * extensions.
     *
     * @generated from protobuf field: repeated string advanced_extension_type_urls = 2;
     */
    advancedExtensionTypeUrls: string[];
    /**
     * list of simple extensions this system supports.
     *
     * @generated from protobuf field: repeated substrait.Capabilities.SimpleExtension simple_extensions = 3;
     */
    simpleExtensions: Capabilities_SimpleExtension[];
}
/**
 * @generated from protobuf message substrait.Capabilities.SimpleExtension
 */
export interface Capabilities_SimpleExtension {
    /**
     * @generated from protobuf field: string uri = 1;
     */
    uri: string;
    /**
     * @generated from protobuf field: repeated string function_keys = 2;
     */
    functionKeys: string[];
    /**
     * @generated from protobuf field: repeated string type_keys = 3;
     */
    typeKeys: string[];
    /**
     * @generated from protobuf field: repeated string type_variation_keys = 4;
     */
    typeVariationKeys: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Capabilities$Type extends MessageType<Capabilities> {
    constructor() {
        super("substrait.Capabilities", [
            { no: 1, name: "substrait_versions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "advanced_extension_type_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "simple_extensions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Capabilities_SimpleExtension }
        ]);
    }
    create(value?: PartialMessage<Capabilities>): Capabilities {
        const message = { substraitVersions: [], advancedExtensionTypeUrls: [], simpleExtensions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Capabilities>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Capabilities): Capabilities {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string substrait_versions */ 1:
                    message.substraitVersions.push(reader.string());
                    break;
                case /* repeated string advanced_extension_type_urls */ 2:
                    message.advancedExtensionTypeUrls.push(reader.string());
                    break;
                case /* repeated substrait.Capabilities.SimpleExtension simple_extensions */ 3:
                    message.simpleExtensions.push(Capabilities_SimpleExtension.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Capabilities, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string substrait_versions = 1; */
        for (let i = 0; i < message.substraitVersions.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.substraitVersions[i]);
        /* repeated string advanced_extension_type_urls = 2; */
        for (let i = 0; i < message.advancedExtensionTypeUrls.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.advancedExtensionTypeUrls[i]);
        /* repeated substrait.Capabilities.SimpleExtension simple_extensions = 3; */
        for (let i = 0; i < message.simpleExtensions.length; i++)
            Capabilities_SimpleExtension.internalBinaryWrite(message.simpleExtensions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.Capabilities
 */
export const Capabilities = new Capabilities$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Capabilities_SimpleExtension$Type extends MessageType<Capabilities_SimpleExtension> {
    constructor() {
        super("substrait.Capabilities.SimpleExtension", [
            { no: 1, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "function_keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type_keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type_variation_keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Capabilities_SimpleExtension>): Capabilities_SimpleExtension {
        const message = { uri: "", functionKeys: [], typeKeys: [], typeVariationKeys: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Capabilities_SimpleExtension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Capabilities_SimpleExtension): Capabilities_SimpleExtension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uri */ 1:
                    message.uri = reader.string();
                    break;
                case /* repeated string function_keys */ 2:
                    message.functionKeys.push(reader.string());
                    break;
                case /* repeated string type_keys */ 3:
                    message.typeKeys.push(reader.string());
                    break;
                case /* repeated string type_variation_keys */ 4:
                    message.typeVariationKeys.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Capabilities_SimpleExtension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uri = 1; */
        if (message.uri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uri);
        /* repeated string function_keys = 2; */
        for (let i = 0; i < message.functionKeys.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.functionKeys[i]);
        /* repeated string type_keys = 3; */
        for (let i = 0; i < message.typeKeys.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.typeKeys[i]);
        /* repeated string type_variation_keys = 4; */
        for (let i = 0; i < message.typeVariationKeys.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.typeVariationKeys[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message substrait.Capabilities.SimpleExtension
 */
export const Capabilities_SimpleExtension = new Capabilities_SimpleExtension$Type();
